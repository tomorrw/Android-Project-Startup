apply plugin: 'maven-publish' // Required for publishing to Maven Central
apply plugin: 'signing' // Required for signing the artifacts

ext {
    PUBLISH_GROUP_ID = 'com.tomorrow.projectStartup'
    PUBLISH_VERSION = '1.0.11'
    PUBLISH_ARTIFACT_ID = project.name.replaceAll(" ", "-").toLowerCase()
}
// Android Source Jar task to include both Java and Kotlin source code
tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.kotlin.srcDirs
        from android.sourceSets.main.java.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}

artifacts {
    archives androidSourcesJar
}

group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

afterEvaluate {

    publishing {
        publications {
            release(MavenPublication) {

                tasks.named("generateMetadataFileForReleasePublication").configure { dependsOn("androidSourcesJar") }

                groupId PUBLISH_GROUP_ID
                artifactId PUBLISH_ARTIFACT_ID
                version PUBLISH_VERSION

                // Two artifacts, the `aar` (or `jar`) and the sources
                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                pom {
                    name = PUBLISH_ARTIFACT_ID
                    description = 'UI Components for Android'
                    url.set("https://github.com/tomorrw/Android-Project-Startup")

                    developers {
                        developer {
                            id = 'MarcJalkh'
                            name = 'MarcJalkh'
                            email = 'marc@tomorrow.services'
                        }
                    }
                    scm {
                        connection = "scm:git:git://github.com/tomorrw/Android-Project-Startup.git"
                        url = "https://github.com/tomorrw/Android-Project-Startup"
                    }
                }
            }
        }


        repositories {
            def envValues = readEnvValues("${project.rootProject.projectDir}/.env")
            if (envValues['USERNAME'] != null && envValues['TOKEN'] != null) {
                maven {
                    name = 'GitHubPackages'
                    url = uri("https://maven.pkg.github.com/tomorrw/Android-Project-Startup")
                    credentials {
                        username = envValues['USERNAME']
                        password = envValues['TOKEN']
                    }
                }
            }

        }
    }
}

def readEnvValues(path) {
    def env = [:] // Create a map to store key-value pairs
    file(path).eachLine { line -> // Adjust the path to your env file
        def (key, value) = line.split('=').collect { it.trim() }
        env[key] = value
    }
    return env
}